/*******************************************************************************
*
* McStas, neutron ray-tracing package
*         Copyright 1997-2002, All rights reserved
*         Risoe National Laboratory, Roskilde, Denmark
*         Institut Laue Langevin, Grenoble, France
*
* Component: Profile
*
* %I
* Written by: Manuel Morgano
* Date: July 28, 2016
* Version: $Revision: 1 $
* Origin: PSI
* Release: McStas 2.1
*
* Beam profile monitor.
*
* %D
* A square single monitor that measures the spatial distribution of the beam in the x direction
*
* Example: Profile(xmin=-0.1, xmax=0.1, ymin=-0.1, ymax=0.1,
*           nP=100, filename="Output.dat")
*
* %P
* INPUT PARAMETERS:
*
* xmin:     Lower x bound of detector opening (m)
* xmax:     Upper x bound of detector opening (m)
* ymin:     Lower y bound of detector opening (m)
* ymax:     Upper y bound of detector opening (m)
* xwidth:   Width of detector. Overrides xmin,xmax. (m)
* yheight:  Height of detector. Overrides ymin,ymax. (m)
* nP:       Number of pixel columns (1)
* filename: Name of file in which to store the detector image (text)
* restore_neutron: If set, the monitor does not influence the neutron state (1)
*
* OUTPUT PARAMETERS:
*
* P_N:      Array of neutron counts
* P_p:      Array of neutron weight counts
* P_p2:     Array of second moments
*
* %E
*******************************************************************************/

DEFINE COMPONENT Profile
DEFINITION PARAMETERS (nP=300)
SETTING PARAMETERS (string filename=0, xmin=-0.15, xmax=0.15, ymin=-0.15, ymax=0.15, 
  xwidth=0, yheight=0, restore_neutron=0)
OUTPUT PARAMETERS (P_N, P_p, P_p2)
/* Neutron parameters: (x,y,z,vx,vy,vz,t,sx,sy,sz,p) */ 
DECLARE
  %{
    double P_N[nP];
    double P_p[nP], P_p2[nP];
  %}
INITIALIZE
  %{
    int i;

    if (xwidth  > 0) { xmax = xwidth/2;  xmin = -xmax; }
    if (yheight > 0) { ymax = yheight/2; ymin = -ymax; }

    if ((xmin >= xmax) || (ymin >= ymax)) {
            printf("Profile_monitor: %s: Null detection area !\n"
                   "ERROR      (xwidth,yheight,xmin,xmax,ymin,ymax). Exiting",
           NAME_CURRENT_COMP);
      exit(0);
    }

    for (i=0; i<nP; i++)
    {
      P_N[i] = 0;
      P_p[i] = 0;
      P_p2[i] = 0;
    }
  %}
TRACE
  %{
    int i;

    PROP_Z0;
    if (x>xmin && x<xmax && y>ymin && y<ymax)
    {
      i = floor((x - xmin)*nP/(xmax - xmin));
      if(i >= 0 && i < nP)
      {
        P_N[i]++;
        P_p[i] += p;
        P_p2[i] += p*p;
        SCATTER;
      }
    } 
    if (restore_neutron) {
      RESTORE_NEUTRON(INDEX_CURRENT_COMP, x, y, z, vx, vy, vz, t, sx, sy, sz, p);
    }
  %}
SAVE
  %{
    DETECTOR_OUT_1D(
        "Profile monitor",
        "Position [cm]",
        "Intensity",
        "P", xmin*100, xmax*100, nP,
        &P_N[0],&P_p[0],&P_p2[0],
        filename);
  %}

MCDISPLAY
%{
  magnify("xy");
  multiline(5, (double)xmin, (double)ymin, 0.0,
               (double)xmax, (double)ymin, 0.0,
               (double)xmax, (double)ymax, 0.0,
               (double)xmin, (double)ymax, 0.0,
               (double)xmin, (double)ymin, 0.0);
%}

END
