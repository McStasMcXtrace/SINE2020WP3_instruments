/*******************************************************************************
*
* McStas, neutron ray-tracing package
*         Copyright (C) 1997-2011, All rights reserved
*         Risoe National Laboratory, Roskilde, Denmark
*         Institut Laue Langevin, Grenoble, France
*
* Component: PosLambda_monitor
*
* %I
* Written by: Manuel Morgano
* Date: 2015
* Version: $Revision: 1.19 $
* Origin: PSI
* Release: McStas 1.12c
*
* position/Lambda monitor (acceptance diagram).
*
* %D
* 2D detector for intensity as a function of both horizontal position
* and wavelength. This gives information similar to an aceptance diagram used
* eg. to investigate beam profiles in neutron guides.
*
* Example: PosLambda_monitor(npos=20, nLambda=20, filename="Output.dip",
*           xmin=-0.1, xmax=0.1, ymin=-0.1, ymax=0.1, maxLambda=14)
*
* %P
* INPUT PARAMETERS:
*
* xmin:     Lower x bound of detector opening (m)
* xmax:     Upper x bound of detector opening (m)
* ymin:     Lower y bound of detector opening (m)
* ymax:     Upper y bound of detector opening (m)
* xwidth:   Width/diameter of detector (x). Overrides xmin,xmax. (m)
* yheight:  Height of detector (y). Overrides ymin,ymax. (m)
* npos:     Number of bins in position (1)
* nLambda:  Number of bins in lambda (1)
* maxLambda:   Maximal Lambda detected (AA)
* filename: Name of file in which to store the detector image (string)
* restore_neutron: If set, the monitor does not influence the neutron state (1)
*
* OUTPUT PARAMETERS:
*
* Lambda_N:    Array of neutron counts
* Lambda_p:    Array of neutron weight counts
* Lambda_p2:   Array of second moments
*
* %E
*******************************************************************************/

DEFINE COMPONENT PosLambda_monitor
DEFINITION PARAMETERS (npos=20, nLambda=20, string filename, restore_neutron=0)
SETTING PARAMETERS (xmin=0, xmax=0, ymin=0, ymax=0, xwidth=0, yheight=0, maxLambda=14)
OUTPUT PARAMETERS (Lambda_N, Lambda_p, Lambda_p2)
DECLARE
  %{
    double Lambda_N[npos][nLambda];
    double Lambda_p[npos][nLambda];
    double Lambda_p2[npos][nLambda];
  %}
INITIALIZE
  %{
    int i,j;

    if (xwidth  > 0) { xmax = xwidth/2;  xmin = -xmax; }
    if (yheight > 0) { ymax = yheight/2; ymin = -ymax; }

    if ((xmin >= xmax) || (ymin >= ymax)) {
            printf("PosLambda_monitor: %s: Null detection area !\n"
                   "ERROR           (xwidth,yheight,xmin,xmax,ymin,ymax). Exiting",
           NAME_CURRENT_COMP);
      exit(0);
    }

    for (i=0; i<npos; i++)
     for (j=0; j<nLambda; j++)
     {
      Lambda_N[i][j] = 0;
      Lambda_p[i][j] = 0;
      Lambda_p2[i][j] = 0;
     }
  %}
TRACE
  %{
    int i,j;
    double lambda,V;

    PROP_Z0;
    if (x>xmin && x<xmax && y>ymin && y<ymax)
    {
      V=sqrt(vx*vx+vy*vy+vz*vz);				/* calculation of neutron velocity */
      lambda=(2*PI/V2K)/V;					/* calculation of lambda */

      if (lambda < maxLambda && lambda > 0)
      {
        i = floor((x - xmin)*npos/(xmax - xmin));
        j = floor((lambda)*nLambda/(maxLambda));
        Lambda_N[i][j]++;
        Lambda_p[i][j] += p;
        Lambda_p2[i][j] += p*p;
        SCATTER;
      }
    }
    if (restore_neutron) {
      RESTORE_NEUTRON(INDEX_CURRENT_COMP, x, y, z, vx, vy, vz, t, sx, sy, sz, p);
    }
  %}
SAVE
  %{
    DETECTOR_OUT_2D(
        "Position-Lambda monitor",
        "pos [m]",
        "Lambda [AA]",
        xmin, xmax, 0, maxLambda,
        npos, nLambda,
        &Lambda_N[0][0],&Lambda_p[0][0],&Lambda_p2[0][0],
        filename);
  %}

MCDISPLAY
  %{
    magnify("xy");
    multiline(5, (double)xmin, (double)ymin, 0.0,
                 (double)xmax, (double)ymin, 0.0,
                 (double)xmax, (double)ymax, 0.0,
                 (double)xmin, (double)ymax, 0.0,
                 (double)xmin, (double)ymin, 0.0);
%}

END
