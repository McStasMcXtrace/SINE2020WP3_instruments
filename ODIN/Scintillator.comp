/*******************************************************************************
*
* McStas, neutron ray-tracing package
*         Copyright 1997-2002, All rights reserved
*         Risoe National Laboratory, Roskilde, Denmark
*         Institut Laue Langevin, Grenoble, France
*
* Component: Scintillator
*
* %I
* Written by: Manuel Morgano
* Date: 27 July, 2016
* Version: $Revision: 1 $
* Origin: PSI
* Release: McStas 2.1
*
* Position-sensitive monitor with a response function similar to a 6-LiF-based scintillator.
*
* %D
* An (n times m) pixel monitor. This component may also be used as a beam
* detector.
*
* Example: scinti(xmin=-0.1, xmax=0.1, ymin=-0.1, ymax=0.1,
            nx=90, ny=90, thickness=100, filename="Output.psd")
*
* %P
* INPUT PARAMETERS:
*
* xmin:     Lower x bound of detector opening (m)
* xmax:     Upper x bound of detector opening (m)
* ymin:     Lower y bound of detector opening (m)
* ymax:     Upper y bound of detector opening (m)
* xwidth:   Width of detector. Overrides xmin,xmax. (m)
* yheight:  Height of detector. Overrides ymin,ymax. (m)
* nx:       Number of pixel columns (1)
* ny:       Number of pixel rows (1)
* thickness: Thickness of the scintillator layer (um)
* filename: Name of file in which to store the detector image (text)
* restore_neutron: If set, the monitor does not influence the neutron state (1)
*
* OUTPUT PARAMETERS:
*
* scinti_N:    Array of neutron counts
* scinti_p:    Array of neutron weight counts
* scinti_p2:   Array of second moments
*
* %E
*******************************************************************************/


DEFINE COMPONENT Scintillator
DEFINITION PARAMETERS (nx=90, ny=90, restore_neutron=0)
SETTING PARAMETERS (string filename=0, xmin=-0.05, xmax=0.05, ymin=-0.05, ymax=0.05, xwidth=0, yheight=0, thickness=100)
OUTPUT PARAMETERS (scinti_N, scinti_p, scinti_p2)
/* Neutron parameters: (x,y,z,vx,vy,vz,t,sx,sy,sz,p) */ 

DECLARE
  %{
    double scinti_N[nx][ny];
    double scinti_p[nx][ny];
    double scinti_p2[nx][ny];
  %}
INITIALIZE
  %{
    int i,j;

    if (xwidth  > 0) { xmax = xwidth/2;  xmin = -xmax; }
    if (yheight > 0) { ymax = yheight/2; ymin = -ymax; }

    if ((xmin >= xmax) || (ymin >= ymax)) {
            printf("scinti_monitor: %s: Null detection area !\n"
                   "ERROR        (xwidth,yheight,xmin,xmax,ymin,ymax). Exiting",
           NAME_CURRENT_COMP);
      exit(0);
    }

    for (i=0; i<nx; i++)
     for (j=0; j<ny; j++)
     {
      scinti_N[i][j] = 0;
      scinti_p[i][j] = 0;
      scinti_p2[i][j] = 0;
     }
  %}
TRACE
  %{
    int i,j;
    double L=0, abs_coeff=0;

    PROP_Z0;
    if (x>xmin && x<xmax && y>ymin && y<ymax)
    {
      L = (2*PI/V2K)/sqrt(vx*vx + vy*vy + vz*vz);
      abs_coeff=1-exp(-0.0033229*thickness*L);
      i = floor((x - xmin)*nx/(xmax - xmin));
      j = floor((y - ymin)*ny/(ymax - ymin));
      scinti_N[i][j]++;
      scinti_p[i][j] += p*abs_coeff;
      scinti_p2[i][j] += p*p*abs_coeff*abs_coeff;
      SCATTER;
    }
    if (restore_neutron) {
      RESTORE_NEUTRON(INDEX_CURRENT_COMP, x, y, z, vx, vy, vz, t, sx, sy, sz, p);
    }
  %}
SAVE
  %{
    DETECTOR_OUT_2D(
        "scinti monitor",
        "X position [cm]",
        "Y position [cm]",
        xmin*100.0, xmax*100.0, ymin*100.0, ymax*100.0,
        nx, ny,
        &scinti_N[0][0],&scinti_p[0][0],&scinti_p2[0][0],
        filename);
  %}

MCDISPLAY
%{
  magnify("xy");
  multiline(5, (double)xmin, (double)ymin, 0.0,
               (double)xmax, (double)ymin, 0.0,
               (double)xmax, (double)ymax, 0.0,
               (double)xmin, (double)ymax, 0.0,
               (double)xmin, (double)ymin, 0.0);
%}

END
